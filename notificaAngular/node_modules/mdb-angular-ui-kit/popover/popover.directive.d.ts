import { ElementRef, EventEmitter, OnDestroy, OnInit, TemplateRef } from '@angular/core';
import { Overlay, OverlayPositionBuilder } from '@angular/cdk/overlay';
import { Subject } from 'rxjs';
import { MdbPopoverPosition } from './popover.types';
import * as i0 from "@angular/core";
export declare class MdbPopoverDirective implements OnInit, OnDestroy {
    private _overlay;
    private _overlayPositionBuilder;
    private _elementRef;
    animation: boolean;
    delayHide: number;
    delayShow: number;
    mdbPopover: TemplateRef<any> | string;
    mdbPopoverData: any;
    mdbPopoverTitle: string;
    offset: number;
    placement: MdbPopoverPosition;
    popoverDisabled: boolean;
    trigger: string;
    popoverShow: EventEmitter<MdbPopoverDirective>;
    popoverShown: EventEmitter<MdbPopoverDirective>;
    popoverHide: EventEmitter<MdbPopoverDirective>;
    popoverHidden: EventEmitter<MdbPopoverDirective>;
    private _overlayRef;
    private _tooltipRef;
    private _open;
    private _showTimeout;
    private _hideTimeout;
    readonly _destroy$: Subject<void>;
    constructor(_overlay: Overlay, _overlayPositionBuilder: OverlayPositionBuilder, _elementRef: ElementRef);
    ngOnInit(): void;
    ngOnDestroy(): void;
    private _bindTriggerEvents;
    private _createOverlayConfig;
    private _createOverlay;
    private _getPosition;
    show(): void;
    hide(): void;
    toggle(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<MdbPopoverDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<MdbPopoverDirective, "[mdbPopover]", ["mdbPopover"], { "animation": { "alias": "animation"; "required": false; }; "delayHide": { "alias": "delayHide"; "required": false; }; "delayShow": { "alias": "delayShow"; "required": false; }; "mdbPopover": { "alias": "mdbPopover"; "required": false; }; "mdbPopoverData": { "alias": "mdbPopoverData"; "required": false; }; "mdbPopoverTitle": { "alias": "mdbPopoverTitle"; "required": false; }; "offset": { "alias": "offset"; "required": false; }; "placement": { "alias": "placement"; "required": false; }; "popoverDisabled": { "alias": "popoverDisabled"; "required": false; }; "trigger": { "alias": "trigger"; "required": false; }; }, { "popoverShow": "popoverShow"; "popoverShown": "popoverShown"; "popoverHide": "popoverHide"; "popoverHidden": "popoverHidden"; }, never, never, false, never>;
    static ngAcceptInputType_animation: unknown;
    static ngAcceptInputType_delayHide: unknown;
    static ngAcceptInputType_delayShow: unknown;
    static ngAcceptInputType_offset: unknown;
    static ngAcceptInputType_popoverDisabled: unknown;
}
