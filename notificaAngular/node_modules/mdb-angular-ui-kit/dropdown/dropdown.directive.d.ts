import { AfterContentInit, ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, Renderer2, TemplateRef, ViewContainerRef } from '@angular/core';
import { Overlay, OverlayPositionBuilder } from '@angular/cdk/overlay';
import { Subject } from 'rxjs';
import { MdbDropdownMenuDirective } from './dropdown-menu.directive';
import { AnimationEvent } from '@angular/animations';
import { BreakpointObserver } from '@angular/cdk/layout';
import * as i0 from "@angular/core";
export type MdbDropdownPositionClass = 'dropdown' | 'dropup' | 'dropstart' | 'dropend';
export declare class MdbDropdownDirective implements OnDestroy, AfterContentInit {
    private _overlay;
    private _overlayPositionBuilder;
    private _elementRef;
    private _vcr;
    private _breakpointObserver;
    private _cdRef;
    private _renderer;
    _template: TemplateRef<any>;
    _dropdownToggle: ElementRef;
    _dropdownMenu: MdbDropdownMenuDirective;
    animation: boolean;
    closeOnEsc: boolean;
    closeOnItemClick: boolean;
    closeOnOutsideClick: boolean;
    offset: number;
    get positionClass(): MdbDropdownPositionClass;
    set positionClass(newClass: MdbDropdownPositionClass);
    private _positionClass;
    withPush: boolean;
    dropdownShow: EventEmitter<MdbDropdownDirective>;
    dropdownShown: EventEmitter<MdbDropdownDirective>;
    dropdownHide: EventEmitter<MdbDropdownDirective>;
    dropdownHidden: EventEmitter<MdbDropdownDirective>;
    private _overlayRef;
    private _portal;
    private _open;
    private _isDropUp;
    private _isDropStart;
    private _isDropEnd;
    private _isDropdownMenuEnd;
    private _xPosition;
    private _breakpoints;
    readonly _destroy$: Subject<void>;
    get host(): HTMLElement;
    _breakpointSubscription: any;
    _animationState: string;
    constructor(_overlay: Overlay, _overlayPositionBuilder: OverlayPositionBuilder, _elementRef: ElementRef, _vcr: ViewContainerRef, _breakpointObserver: BreakpointObserver, _cdRef: ChangeDetectorRef, _renderer: Renderer2);
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    private _bindDropdownToggleClick;
    private _listenToMenuPositionClassChange;
    private _updateOverlay;
    private _createOverlayConfig;
    private _createOverlay;
    private _createPositionStrategy;
    private _getPosition;
    private _listenToEscKeyup;
    private _listenToClick;
    onAnimationEnd(event: AnimationEvent): void;
    private _subscribeBrakpoints;
    show(): void;
    private _handleKeyboardNavigation;
    hide(): void;
    toggle(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<MdbDropdownDirective, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<MdbDropdownDirective, "[mdbDropdown]", never, { "animation": { "alias": "animation"; "required": false; }; "closeOnEsc": { "alias": "closeOnEsc"; "required": false; }; "closeOnItemClick": { "alias": "closeOnItemClick"; "required": false; }; "closeOnOutsideClick": { "alias": "closeOnOutsideClick"; "required": false; }; "offset": { "alias": "offset"; "required": false; }; "positionClass": { "alias": "positionClass"; "required": false; }; "withPush": { "alias": "withPush"; "required": false; }; }, { "dropdownShow": "dropdownShow"; "dropdownShown": "dropdownShown"; "dropdownHide": "dropdownHide"; "dropdownHidden": "dropdownHidden"; }, ["_dropdownToggle", "_dropdownMenu"], ["*", ".dropdown-toggle", ".dropdown-menu"], false, never>;
    static ngAcceptInputType_animation: unknown;
    static ngAcceptInputType_closeOnEsc: unknown;
    static ngAcceptInputType_closeOnItemClick: unknown;
    static ngAcceptInputType_closeOnOutsideClick: unknown;
    static ngAcceptInputType_offset: unknown;
    static ngAcceptInputType_withPush: unknown;
}
