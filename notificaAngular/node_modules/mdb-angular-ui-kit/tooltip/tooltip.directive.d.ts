import { ElementRef, EventEmitter, OnDestroy, OnInit } from '@angular/core';
import { Overlay, OverlayPositionBuilder } from '@angular/cdk/overlay';
import { MdbTooltipPosition } from './tooltip.types';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
export declare class MdbTooltipDirective implements OnInit, OnDestroy {
    private _overlay;
    private _overlayPositionBuilder;
    private _elementRef;
    mdbTooltip: string;
    tooltipDisabled: boolean;
    placement: MdbTooltipPosition;
    html: boolean;
    animation: boolean;
    trigger: string;
    delayShow: number;
    delayHide: number;
    offset: number;
    tooltipShow: EventEmitter<MdbTooltipDirective>;
    tooltipShown: EventEmitter<MdbTooltipDirective>;
    tooltipHide: EventEmitter<MdbTooltipDirective>;
    tooltipHidden: EventEmitter<MdbTooltipDirective>;
    private _overlayRef;
    private _tooltipRef;
    private _open;
    private _showTimeout;
    private _hideTimeout;
    readonly _destroy$: Subject<void>;
    constructor(_overlay: Overlay, _overlayPositionBuilder: OverlayPositionBuilder, _elementRef: ElementRef);
    ngOnInit(): void;
    ngOnDestroy(): void;
    private _bindTriggerEvents;
    private _createOverlayConfig;
    private _createOverlay;
    private _getPosition;
    show(): void;
    hide(): void;
    toggle(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<MdbTooltipDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<MdbTooltipDirective, "[mdbTooltip]", ["mdbTooltip"], { "mdbTooltip": { "alias": "mdbTooltip"; "required": false; }; "tooltipDisabled": { "alias": "tooltipDisabled"; "required": false; }; "placement": { "alias": "placement"; "required": false; }; "html": { "alias": "html"; "required": false; }; "animation": { "alias": "animation"; "required": false; }; "trigger": { "alias": "trigger"; "required": false; }; "delayShow": { "alias": "delayShow"; "required": false; }; "delayHide": { "alias": "delayHide"; "required": false; }; "offset": { "alias": "offset"; "required": false; }; }, { "tooltipShow": "tooltipShow"; "tooltipShown": "tooltipShown"; "tooltipHide": "tooltipHide"; "tooltipHidden": "tooltipHidden"; }, never, never, false, never>;
}
