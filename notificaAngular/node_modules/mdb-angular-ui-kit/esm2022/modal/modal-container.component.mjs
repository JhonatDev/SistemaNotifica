import { CdkPortalOutlet } from '@angular/cdk/portal';
import { ChangeDetectionStrategy, Component, HostBinding, HostListener, Inject, ViewChild, } from '@angular/core';
import { fromEvent, Subject } from 'rxjs';
import { filter, takeUntil } from 'rxjs/operators';
import { DOCUMENT } from '@angular/common';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/a11y";
import * as i2 from "@angular/common";
import * as i3 from "@angular/cdk/portal";
// width below which, according to css rules, modal position changes - modal gets position relative instead of absolute.
const MODAL_CSS_BREAKPOINT = 992;
const MODAL_OPEN_CLASS = 'modal-open';
const NON_INVASIVE_CLASS = 'modal-non-invasive-open';
const NON_INVASIVE_SHOW_CLASS = 'modal-non-invasive-show';
export class MdbModalContainerComponent {
    _document;
    _elementRef;
    _renderer;
    _focusTrapFactory;
    _ngZone;
    _portalOutlet;
    modalDialog;
    modalContent;
    _destroy$ = new Subject();
    backdropClick$ = new Subject();
    _config;
    BACKDROP_TRANSITION = 150;
    MODAL_TRANSITION = 200;
    NON_INVASIVE_TRANSITION = 450;
    _previouslyFocusedElement;
    _focusTrap;
    modal = true;
    get hasAnimation() {
        return this._config.animation;
    }
    onWindowResize() {
        this._ngZone.runOutsideAngular(() => {
            if (this._config.nonInvasive) {
                this._handleWindowResize();
            }
        });
    }
    get host() {
        return this._elementRef.nativeElement;
    }
    _isScrollable = false;
    _isBottomRight = false;
    _isBottomLeft = false;
    _isTopRight = false;
    _isTopLeft = false;
    _isSideTopModal = false;
    _isSideBottomModal = false;
    _isSideModal = false;
    _isModalBottom = false;
    _modalContentRect;
    _modalContentComputedStyles;
    _modalDialogComputedStyles;
    _topOffset = 0;
    _leftOffset = 0;
    _rightOffset = 0;
    _bottomOffset = 0;
    constructor(_document, _elementRef, _renderer, _focusTrapFactory, _ngZone) {
        this._document = _document;
        this._elementRef = _elementRef;
        this._renderer = _renderer;
        this._focusTrapFactory = _focusTrapFactory;
        this._ngZone = _ngZone;
    }
    ngOnInit() {
        this._updateContainerClass();
        this._renderer.setStyle(this.host, 'display', 'block');
        if (!this._config.nonInvasive) {
            this._focusTrap = this._focusTrapFactory.create(this.host);
            this._previouslyFocusedElement = this._document.activeElement;
        }
        const focusElement = this._config.focusElementSelector &&
            this.modalContent.nativeElement.querySelector(this._config.focusElementSelector);
        if (this._config.animation) {
            setTimeout(() => {
                this._renderer.addClass(this.host, 'show');
                if (focusElement) {
                    setTimeout(() => {
                        focusElement.focus();
                    }, this.MODAL_TRANSITION);
                }
                else {
                    setTimeout(() => {
                        this._focusTrap?.focusInitialElementWhenReady();
                    }, this.MODAL_TRANSITION);
                }
            }, this.BACKDROP_TRANSITION);
        }
        else if (focusElement) {
            focusElement.focus();
        }
        else {
            this._focusTrap?.focusInitialElementWhenReady();
        }
    }
    ngAfterViewInit() {
        const widthWithVerticalScroll = this._document.body.offsetWidth;
        this._renderer.addClass(this._document.body, MODAL_OPEN_CLASS);
        if (this._config.nonInvasive) {
            this._renderer.addClass(this._document.body, NON_INVASIVE_CLASS);
            setTimeout(() => {
                this._onNonInvasiveModalShown();
            }, this.NON_INVASIVE_TRANSITION);
        }
        if (!this._config.nonInvasive) {
            this._renderer.setStyle(this._document.body, 'overflow', 'hidden');
        }
        const widthWithoutVerticalScroll = this._document.body.offsetWidth;
        if (!this._config.nonInvasive) {
            this._renderer.setStyle(this._document.body, 'padding-right', `${widthWithoutVerticalScroll - widthWithVerticalScroll}px`);
        }
        if (!this._config.ignoreBackdropClick && !this._config.nonInvasive) {
            fromEvent(this.host, 'mousedown')
                .pipe(filter((event) => {
                const target = event.target;
                const dialog = this.modalDialog.nativeElement;
                const notDialog = target !== dialog;
                const notDialogContent = !dialog.contains(target);
                return notDialog && notDialogContent;
            }), takeUntil(this._destroy$))
                .subscribe((event) => {
                this.backdropClick$.next(event);
            });
        }
    }
    ngOnDestroy() {
        this._previouslyFocusedElement?.focus();
        this._focusTrap?.destroy();
        this._destroy$.next();
        this._destroy$.complete();
    }
    _updateContainerClass() {
        if (this._config.containerClass === '' ||
            (this._config.containerClass.length && this._config.containerClass.length === 0)) {
            return;
        }
        const containerClasses = this._config.containerClass.split(' ');
        containerClasses.forEach((containerClass) => {
            this._renderer.addClass(this.host, containerClass);
        });
    }
    _onNonInvasiveModalShown() {
        this._isScrollable = this._config.modalClass.includes('modal-dialog-scrollable');
        this._isBottomRight = this._config.modalClass.includes('modal-bottom-right');
        this._isBottomLeft = this._config.modalClass.includes('modal-bottom-left');
        this._isTopRight = this._config.modalClass.includes('modal-top-right');
        this._isTopLeft = this._config.modalClass.includes('modal-top-left');
        this._isModalBottom = this._config.modalClass.includes('modal-bottom');
        this._isSideTopModal = this._isTopLeft || this._isTopRight;
        this._isSideBottomModal = this._isBottomLeft || this._isBottomRight;
        this._isSideModal = this._isSideTopModal || this._isSideBottomModal;
        this._modalContentRect = this.modalContent.nativeElement.getBoundingClientRect();
        this._modalContentComputedStyles = window.getComputedStyle(this.modalContent.nativeElement);
        this._modalDialogComputedStyles = window.getComputedStyle(this.modalDialog.nativeElement);
        this._topOffset = parseInt(this._modalDialogComputedStyles.top, 0);
        this._leftOffset = parseInt(this._modalDialogComputedStyles.left, 0);
        this._rightOffset = parseInt(this._modalDialogComputedStyles.right, 0);
        this._bottomOffset = parseInt(this._modalDialogComputedStyles.bottom, 0);
        this._renderer.addClass(this.host, NON_INVASIVE_SHOW_CLASS);
        this._setNonInvasiveStyles();
    }
    _setNonInvasiveStyles(leftOffset = 0, topOffset = 0) {
        const isAboveBreakpoint = window.innerWidth >= MODAL_CSS_BREAKPOINT;
        this._renderer.setStyle(this.host, 'left', `${this._modalContentRect.left + leftOffset}px`);
        this._renderer.setStyle(this.host, 'width', this._modalContentComputedStyles.width);
        if (!this._isScrollable) {
            // If the modal content is not long enough to require scroll shrink the modal wrapper to
            // the height of modal content so other elements on site are clickable outside modal
            this._renderer.setStyle(this.host, 'height', this._modalContentComputedStyles.height);
            this._renderer.setStyle(this.host, 'display', '');
        }
        if (isAboveBreakpoint) {
            if (this._isSideBottomModal || this._isModalBottom) {
                // Force modal to correct bottom placement. It's needed because modal host has position
                // fixed and fixed height.
                this._renderer.setStyle(this.host, 'top', `${this._modalContentRect.top + topOffset}px`);
            }
            if (this._isSideModal) {
                // Enable horizontal scrolling when the content is wider than the modal's fixed width
                this._renderer.setStyle(this.host, 'overflowX', 'auto');
            }
        }
        if (!isAboveBreakpoint) {
            this.host.style.height = '';
        }
    }
    _onNonInvasiveModalHidden() {
        this._renderer.removeClass(this.host, NON_INVASIVE_SHOW_CLASS);
        this._resetNonInvasiveStyles();
        this._removeNonInvasiveClass();
    }
    _resetNonInvasiveStyles() {
        this._renderer.setStyle(this.host, 'left', '');
        this._renderer.setStyle(this.host, 'top', '');
        this._renderer.setStyle(this.host, 'height', '');
        this._renderer.setStyle(this.host, 'width', '');
        if (!this._isScrollable) {
            this._renderer.setStyle(this.host, 'display', '');
        }
        if (this._isSideModal) {
            this._renderer.setStyle(this.host, 'overflowX', '');
        }
    }
    _removeNonInvasiveClass() {
        const isOtherModalOpen = this._document.body.querySelector('.modal.show.modal-non-invasive-show');
        if (!isOtherModalOpen) {
            this._renderer.removeClass(this._document.body, NON_INVASIVE_CLASS);
        }
        else {
            this._renderer.addClass(this._document.body, MODAL_OPEN_CLASS);
        }
    }
    _handleWindowResize() {
        const modalContent = this.host.querySelector('.modal-content');
        this._resetNonInvasiveStyles();
        this._modalContentRect = modalContent.getBoundingClientRect();
        this._modalContentComputedStyles = window.getComputedStyle(modalContent);
        if (this._isSideTopModal || this._isSideBottomModal) {
            let sideOffset = 0;
            let topOffset = 0;
            if (this._isBottomRight || this._isBottomLeft) {
                topOffset = -this._bottomOffset;
            }
            if (this._isBottomRight || this._isTopRight) {
                sideOffset = -this._rightOffset;
            }
            if (this._isBottomLeft || this._isTopLeft) {
                sideOffset = this._leftOffset;
            }
            this._setNonInvasiveStyles(sideOffset, topOffset);
        }
        else {
            this._setNonInvasiveStyles();
        }
    }
    _close() {
        if (this._config.animation) {
            this._renderer.removeClass(this.host, 'show');
        }
        // Pause iframe/video when closing modal
        const iframeElements = Array.from(this.host.querySelectorAll('iframe'));
        const videoElements = Array.from(this.host.querySelectorAll('video'));
        iframeElements.forEach((iframe) => {
            const srcAttribute = iframe.getAttribute('src');
            this._renderer.setAttribute(iframe, 'src', srcAttribute);
        });
        videoElements.forEach((video) => {
            video.pause();
        });
    }
    _restoreScrollbar() {
        this._renderer.removeClass(this._document.body, MODAL_OPEN_CLASS);
        this._renderer.removeStyle(this._document.body, 'overflow');
        this._renderer.removeStyle(this._document.body, 'padding-right');
    }
    attachComponentPortal(portal) {
        return this._portalOutlet.attachComponentPortal(portal);
    }
    attachTemplatePortal(portal) {
        return this._portalOutlet.attachTemplatePortal(portal);
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: MdbModalContainerComponent, deps: [{ token: DOCUMENT }, { token: i0.ElementRef }, { token: i0.Renderer2 }, { token: i1.ConfigurableFocusTrapFactory }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "18.2.4", type: MdbModalContainerComponent, selector: "mdb-modal-container", host: { listeners: { "window:resize": "onWindowResize($event)" }, properties: { "class.modal": "this.modal", "class.fade": "this.hasAnimation" } }, viewQueries: [{ propertyName: "_portalOutlet", first: true, predicate: CdkPortalOutlet, descendants: true, static: true }, { propertyName: "modalDialog", first: true, predicate: ["dialog"], descendants: true, static: true }, { propertyName: "modalContent", first: true, predicate: ["content"], descendants: true, static: true }], ngImport: i0, template: "<div #dialog [class]=\"'modal-dialog' + (_config.modalClass ? ' ' + _config.modalClass : '')\">\n  <div\n    #content\n    class=\"modal-content\"\n    [ngClass]=\"{ 'rounded-0': _config.modalClass.includes('modal-frame') }\"\n  >\n    <ng-template cdkPortalOutlet></ng-template>\n  </div>\n</div>\n", dependencies: [{ kind: "directive", type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i3.CdkPortalOutlet, selector: "[cdkPortalOutlet]", inputs: ["cdkPortalOutlet"], outputs: ["attached"], exportAs: ["cdkPortalOutlet"] }], changeDetection: i0.ChangeDetectionStrategy.Default });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: MdbModalContainerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'mdb-modal-container', changeDetection: ChangeDetectionStrategy.Default, template: "<div #dialog [class]=\"'modal-dialog' + (_config.modalClass ? ' ' + _config.modalClass : '')\">\n  <div\n    #content\n    class=\"modal-content\"\n    [ngClass]=\"{ 'rounded-0': _config.modalClass.includes('modal-frame') }\"\n  >\n    <ng-template cdkPortalOutlet></ng-template>\n  </div>\n</div>\n" }]
        }], ctorParameters: () => [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }, { type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i1.ConfigurableFocusTrapFactory }, { type: i0.NgZone }], propDecorators: { _portalOutlet: [{
                type: ViewChild,
                args: [CdkPortalOutlet, { static: true }]
            }], modalDialog: [{
                type: ViewChild,
                args: ['dialog', { static: true }]
            }], modalContent: [{
                type: ViewChild,
                args: ['content', { static: true }]
            }], modal: [{
                type: HostBinding,
                args: ['class.modal']
            }], hasAnimation: [{
                type: HostBinding,
                args: ['class.fade']
            }], onWindowResize: [{
                type: HostListener,
                args: ['window:resize', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,